name: saboteur

services:
  db:
    image: postgres:12.3
    restart: unless-stopped
    volumes:
      - ./data:/var/lib/postgresql/data
    ports:
      - 5432:5432
    environment:
      POSTGRES_USER: ${DB_USER}
      POSTGRES_PASSWORD: ${DB_PASSWORD}
      POSTGRES_DB: ${DB_DATABASE}
    networks:
      - database

  redis:
    image: redis:6.0.5
    restart: unless-stopped
    ports:
      - ${REDIS_PORT}:6379
    environment:
      REDIS_PASSWORD: ${REDIS_PASSWORD}
    networks:
      - database

  minio:
    image: minio/minio
    ports:
      - "${MINIO_ADDRESS}:${MINIO_ADDRESS}"
      - "${MINIO_CONSOLE_ADDRESS}:${MINIO_CONSOLE_ADDRESS}"
    volumes:
      - s3-storage:/data
    environment:
      MINIO_ROOT_USER: ${AWS_ACCESS_KEY_ID}
      MINIO_ROOT_PASSWORD: ${AWS_SECRET_ACCESS_KEY}
      MINIO_ADDRESS: ":${MINIO_ADDRESS}"
      MINIO_CONSOLE_ADDRESS: ":${MINIO_CONSOLE_ADDRESS}"
    command: minio server /data
    healthcheck:
      test: ["CMD", "mc", "ready", "local"]
      interval: 3s
      timeout: 5s
      retries: 3
    networks:
      - back

  create-aws-bucket:
    image: minio/mc
    depends_on:
      minio:
        condition: service_healthy
    entrypoint: >
      /bin/sh -c "
      /usr/bin/mc alias set minio http://minio:${MINIO_ADDRESS} ${AWS_ACCESS_KEY_ID} ${AWS_SECRET_ACCESS_KEY};
      /usr/bin/mc mb minio/${AWS_BUCKET} 2> /dev/null && /usr/bin/mc anonymous set public minio/${AWS_BUCKET} || echo \"Bucket minio/${AWS_BUCKET} already exists. Skipping.\";
      exit 0;
      "
    networks:
      - back

networks:
  database:
    name: database
  back:
    name: back

volumes:
  s3-storage:
